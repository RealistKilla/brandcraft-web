// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



enum UserRole {
  ADMIN
  MEMBER
}


model Persona {
  id            String    @id @default(cuid())
  name          String
  description   String
  demographics  Json
  behaviors     Json
  preferences   Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String
  campaigns     Campaign[]

  @@map("personas")
}

model Campaign {
  id            String    @id @default(cuid())
  name          String
  description   String
  strategy      String    @db.Text
  status        CampaignStatus @default(DRAFT)
  startDate     DateTime?
  endDate       DateTime?
  budget        Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String
  persona       Persona   @relation(fields: [personaId], references: [id])
  personaId     String
  contents      Content[]

  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

model Content {
  id            String    @id @default(cuid())
  title         String
  description   String
  content       String    @db.Text
  type          ContentType
  status        ContentStatus @default(DRAFT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String
  campaign      Campaign  @relation(fields: [campaignId], references: [id])
  campaignId    String

  @@map("content")
}

enum ContentType {
  BLOG_POST
  SOCIAL_POST
  EMAIL
  AD_COPY
  LANDING_PAGE
}

enum ContentStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

model Application {
  id            String    @id @default(cuid())
  name          String
  applicationId String    @unique @default(cuid())
  applicationKey String   @unique @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String

  @@map("applications")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  role          UserRole  @default(MEMBER)
  personas      Persona[]
  campaigns     Campaign[]
  contents      Content[]
  applications  Application[]

  @@map("users")
}

model PlatformUser {
  id                String   @id @default(uuid())
  company           String?
  jobTitle          String?  @map("job_title")
  industry          String?
  location          String?
  age               String?
  signupDate        DateTime @default(now()) @map("signup_date")
  monthlySpendUsd   Float?   @map("monthly_spend_usd")
  active            Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  orgId           String   @map("org_id")
  organization    Organization @relation(fields: [orgId], references: [id])

  @@index([orgId])               // helps queries like `where { orgId: â€¦ }`
  
  @@map("platform_users")
}

model Organization {
  id            String    @id @default(cuid())
  name          String    @default("Basic User")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  platformUsers PlatformUser[]
  personas      Persona[]
  campaigns     Campaign[]
  contents      Content[]
  applications  Application[]

  @@map("organizations")
}

model Industries {
  id          BigInt      @id @default(autoincrement()) @db.BigInt   
  createdAt   DateTime    @default(now())              @map("created_at") @db.Timestamptz(6)
  industry    String                                    @db.Text

  @@map("industries")   
}

model AgeRanges {
  id          BigInt      @id @default(autoincrement()) @db.BigInt   
  createdAt   DateTime    @default(now())              @map("created_at") @db.Timestamptz(6)
  ageRange    String                                    @db.Text

  @@map("age_ranges")   
}